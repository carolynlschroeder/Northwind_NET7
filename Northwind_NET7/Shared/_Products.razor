@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.QuickGrid
@using Northwind_Net7_Shared
@using System.Net
@inject HttpClient Http
@inject NavigationManager NavManager

<QuickGrid Items="@products" Pagination="@pagination">
    <PropertyColumn Title="Product Name" Property="@(p => p.ProductName)" Sortable="true">
        <ColumnOptions>
            <input @bind="@searchName" placeholder="Search..." class="form-control" autofocus
                   @bind:event="oninput" @bind:after="UpdateFilter" />
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Title="Quantity Per Unit" Property="@(p => p.QuantityPerUnit)"/>
    <TemplateColumn Title="Price" Align="@Align.Right" SortBy="@(GridSort<Product>.ByAscending(p => p.UnitPrice))">
        $@(context.UnitPrice?.ToString("N2"))
    </TemplateColumn>
</QuickGrid>
<Paginator Value="@pagination" />

@code{

    [Parameter]
    public int? CategoryId { get; set; }

    //GridItemsProvider<Product>? productsProvider;
    IQueryable<Product> products;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private string? searchName;


    protected override async Task OnParametersSetAsync()
    {
        await UpdateFilter();
    }

    async  Task UpdateFilter()
    {
        String url = CategoryId == null ? "/products" : $"/products/getByCategory/{CategoryId}";


        var productList = await Http.GetFromJsonAsync<List<Product>>(url);
        if (!String.IsNullOrEmpty(searchName))
        {
            productList = productList.Where(p => p.ProductName.Contains(searchName)).ToList();
        }
        products = productList.AsQueryable();

    }

}